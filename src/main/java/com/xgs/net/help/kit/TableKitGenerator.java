package com.xgs.net.help.kit;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.List;

import com.jfinal.kit.LogKit;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.generator.TableMeta;

/**
 * MappingKit 文件生成器
 */
public class TableKitGenerator {
	
	protected String packageTemplate =
		"package %s;%n%n";
	protected String importTemplate = 
			"import java.util.Map;%n%n"
			+"import java.util.HashMap;%n%n"
	+"import com.jfinal.plugin.activerecord.Model;%n%n";
	
		//"import com.jfinal.plugin.activerecord.ActiveRecordPlugin;%n%n";
	protected String classDefineTemplate =
		"/**%n" +
		" * Generated by JFinal, do not modify this file.%n" +
		" */%n" +
		"public class %s {%n%n";
	protected String mappingMethodDefineTemplate =
			"\tprivate static Map<String,Class<? extends Model<?>>> map = new HashMap<String,Class<? extends Model<?>>>();%n%n"
			
			+"\tpublic static Map<String,Class<? extends Model<?>>> mapping() {%n\t\treturn map;%n\t}%n%n";
	protected String mappingMethodContentTemplate =
				"\t\tmap.put(\"%s\", %s.class);%n";
	protected String compositeKeyTemplate =
			"\t\t// Composite Primary Key order: %s%n";
	
	protected String tableKitPackageName;
	protected String tableKitOutputDir;
	protected String TableKit = "TableKit";
	
	public TableKitGenerator(String tableKitPackageName, String tableKitOutputDir) {
		this.tableKitPackageName = tableKitPackageName;
		this.tableKitOutputDir = tableKitOutputDir;
	}
	
	public void setMappingKitOutputDir(String mappingKitOutputDir) {
		if (StrKit.notBlank(mappingKitOutputDir))
			this.tableKitOutputDir = mappingKitOutputDir;
	}
	
	public void setMappingKitPackageName(String mappingKitPackageName) {
		if (StrKit.notBlank(mappingKitPackageName))
			this.tableKitPackageName = mappingKitPackageName;
	}
	
	public void setMappingKitClassName(String mappingKitClassName) {
		if (StrKit.notBlank(mappingKitClassName))
			this.TableKit = StrKit.firstCharToUpperCase(mappingKitClassName);
	}
	
	public void generate(List<TableMeta> tableMetas) {
		System.out.println("Generate MappingKit file ...");
		StringBuilder ret = new StringBuilder();
		genPackage(ret);
		genImport(ret);
		genClassDefine(ret);
		genMappingMethod(tableMetas, ret);
		ret.append(String.format("}%n%n"));
		wirtToFile(ret);
	}
	
	protected void genPackage(StringBuilder ret) {
		ret.append(String.format(packageTemplate, tableKitPackageName));
	}
	
	protected void genImport(StringBuilder ret) {
		ret.append(String.format(importTemplate));
	}
	
	protected void genClassDefine(StringBuilder ret) {
		ret.append(String.format(classDefineTemplate, TableKit, TableKit));
	}
	
	protected void genMappingMethod(List<TableMeta> tableMetas, StringBuilder ret) {
		ret.append(String.format(mappingMethodDefineTemplate));
		ret.append(String.format("\tstatic{%n"));
		for (TableMeta tableMeta : tableMetas) {
			String add = String.format(mappingMethodContentTemplate, tableMeta.name,  tableMeta.modelName);
			ret.append(add);
		}
		ret.append(String.format("\t}%n"));
	}
	
	/**
	 * _MappingKit.java 覆盖写入
	 */
	protected void wirtToFile(StringBuilder ret) {
		FileWriter fw = null;
		try {
			File dir = new File(tableKitOutputDir);
			if (!dir.exists())
				dir.mkdirs();
			
			String target = tableKitOutputDir + File.separator + TableKit + ".java";
			fw = new FileWriter(target);
			fw.write(ret.toString());
		}
		catch (IOException e) {
			throw new RuntimeException(e);
		}
		finally {
			if (fw != null)
				try {fw.close();} catch (IOException e) {LogKit.error(e.getMessage(), e);}
		}
	}
}




